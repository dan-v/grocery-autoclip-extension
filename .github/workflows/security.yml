name: Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run security scan weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
        
    - name: Install security tools
      run: |
        npm install -g retire jshint
        
    - name: Check for known vulnerabilities
      run: |
        echo "üîç Scanning for known security vulnerabilities..."
        
        # Use retire.js to check for known vulnerable JavaScript libraries
        if command -v retire >/dev/null 2>&1; then
          retire --js --outputformat json --outputpath retire-report.json || {
            echo "‚ö†Ô∏è  retire.js found potential issues"
            if [ -f retire-report.json ]; then
              cat retire-report.json
            fi
          }
        fi
        
        echo "‚úÖ Vulnerability scan completed"
        
    - name: Manifest security analysis
      run: |
        echo "üîç Analyzing manifest.json for security issues..."
        
        # Check for overly broad permissions
        DANGEROUS_PERMISSIONS=("tabs" "history" "bookmarks" "browsingData" "topSites" "cookies")
        for perm in "${DANGEROUS_PERMISSIONS[@]}"; do
          if grep -q "\"$perm\"" manifest.json; then
            echo "‚ö†Ô∏è  Potentially sensitive permission detected: $perm"
            echo "Ensure this permission is necessary for your extension's functionality"
          fi
        done
        
        # Check for overly broad host permissions
        if grep -q '\*://\*/\*\|\*://\*\.\*/\*' manifest.json; then
          echo "‚ö†Ô∏è  Overly broad host permissions detected"
          echo "Consider limiting to specific domains only"
        fi
        
        # Check for externally_connectable
        if grep -q "externally_connectable" manifest.json; then
          echo "‚ö†Ô∏è  externally_connectable found in manifest"
          echo "Review external connections for security implications"
        fi
        
        # Check content security policy
        if ! grep -q "content_security_policy" manifest.json; then
          echo "‚ÑπÔ∏è  No Content Security Policy defined"
          echo "Consider adding CSP for additional security"
        fi
        
        echo "‚úÖ Manifest security analysis completed"
        
    - name: JavaScript security analysis
      run: |
        echo "üîç Analyzing JavaScript files for security issues..."
        
        # Check for dangerous patterns
        DANGEROUS_PATTERNS=(
          "eval("
          "innerHTML"
          "outerHTML"
          "document.write"
          "setTimeout.*string"
          "setInterval.*string"
          "Function("
          "globalThis"
          "window.location.*="
          "document.domain"
        )
        
        for pattern in "${DANGEROUS_PATTERNS[@]}"; do
          if grep -r "$pattern" --include="*.js" --include="*.ts" src/ dist/ 2>/dev/null; then
            echo "‚ö†Ô∏è  Potentially dangerous pattern found: $pattern"
            echo "Review usage for security implications"
          fi
        done
        
        # Check for proper API usage
        if grep -q "chrome\.tabs\.executeScript" src/*.ts dist/*.js 2>/dev/null; then
          echo "‚ö†Ô∏è  Deprecated chrome.tabs.executeScript found"
          echo "Migrate to chrome.scripting.executeScript (Manifest V3)"
        fi
        
        # Check for inline event handlers in HTML
        if grep -r "on[a-z]*=" --include="*.html" . 2>/dev/null; then
          echo "‚ö†Ô∏è  Inline event handlers found in HTML"
          echo "Move to external JavaScript for better CSP compliance"
        fi
        
        echo "‚úÖ JavaScript security analysis completed"
        
    - name: Privacy compliance check
      run: |
        echo "üîç Checking privacy compliance..."
        
        # Check for data collection patterns
        DATA_COLLECTION_PATTERNS=(
          "localStorage"
          "chrome\.storage"
          "sessionStorage"
          "indexedDB"
          "XMLHttpRequest"
          "fetch("
          "navigator\.userAgent"
          "navigator\.platform"
          "location\.href"
        )
        
        echo "üìä Data usage patterns found:"
        for pattern in "${DATA_COLLECTION_PATTERNS[@]}"; do
          if grep -r "$pattern" --include="*.js" --include="*.ts" src/ dist/ >/dev/null 2>&1; then
            COUNT=$(grep -r "$pattern" --include="*.js" --include="*.ts" src/ dist/ | wc -l)
            echo "  - $pattern: $COUNT occurrences"
          fi
        done
        
        # Check for privacy policy
        if [ ! -f "PRIVACY_POLICY.md" ]; then
          echo "‚ö†Ô∏è  Privacy policy file not found"
          echo "Chrome Web Store requires a privacy policy for extensions that handle user data"
        else
          echo "‚úÖ Privacy policy found"
        fi
        
        echo "‚úÖ Privacy compliance check completed"
        
    - name: Generate security report
      run: |
        echo "üìã Security Scan Summary" > security-report.md
        echo "========================" >> security-report.md
        echo "" >> security-report.md
        echo "**Scan Date:** $(date)" >> security-report.md
        echo "**Extension Version:** $(grep '"version"' manifest.json | sed 's/.*"version": "\([^"]*\)".*/\1/')" >> security-report.md
        echo "" >> security-report.md
        
        # Add any specific findings here
        echo "**Status:** ‚úÖ Security scan completed" >> security-report.md
        echo "" >> security-report.md
        echo "**Recommendations:**" >> security-report.md
        echo "- Regularly update dependencies" >> security-report.md
        echo "- Review permissions for least privilege principle" >> security-report.md
        echo "- Keep privacy policy updated" >> security-report.md
        echo "- Test extension in isolation before publishing" >> security-report.md
        
        cat security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: |
          security-report.md
          retire-report.json
        retention-days: 30

  permissions-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Audit extension permissions
      run: |
        echo "üîç Auditing extension permissions..."
        
        echo "üìã Current Permissions:"
        grep -A 20 '"permissions"' manifest.json | grep -E '^\s*"[^"]*"' | sed 's/[",]//g' | sed 's/^/  - /'
        
        echo ""
        echo "üåê Host Permissions:"
        grep -A 20 '"host_permissions"' manifest.json | grep -E '^\s*"[^"]*"' | sed 's/[",]//g' | sed 's/^/  - /'
        
        echo ""
        echo "üìä Permission Justification Check:"
        
        # Check if each permission is actually used
        PERMISSIONS=$(grep -A 20 '"permissions"' manifest.json | grep -E '^\s*"[^"]*"' | sed 's/[",]//g' | sed 's/^[[:space:]]*//')
        
        while IFS= read -r permission; do
          case "$permission" in
            "activeTab")
              if grep -q "chrome\.tabs\|chrome\.scripting" src/*.ts dist/*.js 2>/dev/null; then
                echo "  ‚úÖ activeTab: Used for tab interaction"
              else
                echo "  ‚ö†Ô∏è  activeTab: Permission declared but not used"
              fi
              ;;
            "storage")
              if grep -q "chrome\.storage" src/*.ts dist/*.js 2>/dev/null; then
                echo "  ‚úÖ storage: Used for data persistence"
              else
                echo "  ‚ö†Ô∏è  storage: Permission declared but not used"
              fi
              ;;
            "scripting")
              if grep -q "chrome\.scripting" src/*.ts dist/*.js 2>/dev/null; then
                echo "  ‚úÖ scripting: Used for content script injection"
              else
                echo "  ‚ö†Ô∏è  scripting: Permission declared but not used"
              fi
              ;;
            *)
              echo "  ‚ÑπÔ∏è  $permission: Review usage manually"
              ;;
          esac
        done <<< "$PERMISSIONS"
        
        echo ""
        echo "‚úÖ Permissions audit completed"